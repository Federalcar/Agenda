<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üë©‚Äçüíº Secret√°ria - Organizar Agenda</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.2em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }

        .main-content {
            padding: 30px;
        }

        .notification-badge {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff4757;
            color: white;
            padding: 10px 15px;
            border-radius: 25px;
            font-weight: 600;
            z-index: 1000;
            display: none;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            border-left: 4px solid #ff9a9e;
        }

        .stat-number {
            font-size: 1.5em;
            font-weight: 600;
            color: #495057;
        }

        .stat-label {
            font-size: 0.9em;
            color: #6c757d;
            margin-top: 5px;
        }

        .message-item {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            border-left: 5px solid #ff9a9e;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .message-time {
            color: #6c757d;
            font-size: 0.9em;
        }

        .message-status {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-novo {
            background: #fff3cd;
            color: #856404;
            animation: blink 1s infinite;
        }

        @keyframes blink {
            50% { opacity: 0.5; }
        }

        .status-processando {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-agendado {
            background: #d4edda;
            color: #155724;
        }

        .message-text {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 3px solid #ff9a9e;
            font-style: italic;
            font-size: 1.1em;
        }

        .agenda-form {
            display: none;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .agenda-form.active {
            display: block;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #495057;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #ff9a9e;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .btn-process {
            background: #17a2b8;
            color: white;
        }

        .btn-save {
            background: #28a745;
            color: white;
        }

        .btn-cancel {
            background: #6c757d;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .agenda-result {
            background: #e8f5e8;
            padding: 20px;
            border-radius: 10px;
            margin-top: 15px;
        }

        .agenda-result h4 {
            color: #155724;
            margin-bottom: 15px;
            font-size: 1.1em;
        }

        .agenda-detail {
            display: flex;
            margin-bottom: 8px;
            align-items: center;
        }

        .agenda-detail strong {
            min-width: 100px;
            color: #155724;
        }

        .empty-state {
            text-align: center;
            color: #6c757d;
            padding: 60px 20px;
            font-size: 1.1em;
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateY(100px);
            transition: transform 0.3s;
        }

        .notification.show {
            transform: translateY(0);
        }

        .notification.success {
            background: #28a745;
        }

        .notification.info {
            background: #17a2b8;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 1.8em;
            }
            
            .action-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="notification-badge" id="notification-badge">
        üîî Nova mensagem!
    </div>

    <div class="container">
        <div class="header">
            <h1>üë©‚Äçüíº Secret√°ria</h1>
            <p>Organizar compromissos do chefe</p>
        </div>

        <div class="main-content">
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="stat-novos">0</div>
                    <div class="stat-label">Novos</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stat-processando">0</div>
                    <div class="stat-label">Processando</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stat-agendados">0</div>
                    <div class="stat-label">Agendados</div>
                </div>
            </div>

            <h2 style="margin-bottom: 20px; color: #495057;">üì• Mensagens do Chefe</h2>
            <div id="messages-list">
                <div class="empty-state">
                    <p>üì≠ Aguardando mensagens do chefe...</p>
                </div>
            </div>
        </div>
    </div>

    <div id="notification" class="notification"></div>

    <!-- Firebase Scripts -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-database-compat.js"></script>

    <script>
        // üî• CONFIGURA√á√ÉO FIREBASE - SUBSTITUA PELA SUA!
        const firebaseConfig = {
            apiKey: "AIzaSyCtfuOaQZzUvnlXGa3-S9ie7Eq5-_3mBTk",
            authDomain: "sistema-agendamento-3a735.firebaseapp.com",
            databaseURL: "https://sistema-agendamento-3a735-default-rtdb.firebaseio.com",
            projectId: "sistema-agendamento-3a735",
            storageBucket: "sistema-agendamento-3a735.firebasestorage.app",
            messagingSenderId: "197370619052",
            appId: "1:197370619052:web:98f534ce82ecc5556ceb09"
        };

        // Verificar se Firebase est√° configurado
        let database;
        let isFirebaseConfigured = false;

        try {
            if (firebaseConfig.apiKey && firebaseConfig.databaseURL) {
                firebase.initializeApp(firebaseConfig);
                database = firebase.database();
                isFirebaseConfigured = true;
                console.log('‚úÖ Firebase conectado!');
            } else {
                console.log('‚ö†Ô∏è Firebase n√£o configurado - usando modo demo');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Erro Firebase - usando modo demo:', error);
        }

        let messages = [];

        function loadFromLocalStorage() {
            const saved = localStorage.getItem('agenda_messages');
            if (saved) {
                const allMessages = JSON.parse(saved);
                messages = allMessages.filter(m => m.sender === 'chefe') || [];
                updateMessagesList();
                updateStats();
                
                const hasNew = messages.some(m => !m.status || m.status === 'enviado');
                if (hasNew) {
                    document.getElementById('notification-badge').style.display = 'block';
                }
            }

            if (localStorage.getItem('new_message_notification') === 'true') {
                showNotification('üì® Nova mensagem recebida do chefe!', 'info');
                localStorage.removeItem('new_message_notification');
                document.getElementById('notification-badge').style.display = 'block';
            }
        }

        function setupFirebaseListeners() {
            if (!isFirebaseConfigured) return;

            database.ref('messages').orderByChild('sender').equalTo('chefe')
                .on('value', (snapshot) => {
                    const newMessages = [];
                    snapshot.forEach((child) => {
                        newMessages.push({
                            firebaseKey: child.key,
                            ...child.val()
                        });
                    });
                    
                    const oldCount = messages.length;
                    messages = newMessages.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                    
                    updateMessagesList();
                    updateStats();
                    
                    if (messages.length > oldCount) {
                        showNotification('üî• Nova mensagem recebida via Firebase!', 'info');
                        document.getElementById('notification-badge').style.display = 'block';
                    }
                    
                    const hasNew = messages.some(m => !m.status || m.status === 'enviado');
                    if (hasNew) {
                        document.getElementById('notification-badge').style.display = 'block';
                    } else {
                        document.getElementById('notification-badge').style.display = 'none';
                    }
                });
        }

        // NOVA ABORDAGEM - Usar √≠ndices em vez de IDs
        function processMessageByIndex(index) {
            console.log('üîç Processando mensagem √≠ndice:', index);
            const message = messages[index];
            
            if (message) {
                console.log('‚úÖ Mensagem encontrada:', message);
                message.status = 'processando';
                
                if (isFirebaseConfigured && message.firebaseKey) {
                    database.ref('messages/' + message.firebaseKey).update({status: 'processando'})
                        .then(() => {
                            showNotification('üî• Processando via Firebase!');
                            updateMessagesList();
                            updateStats();
                        })
                        .catch((error) => {
                            console.error('Erro Firebase:', error);
                            showNotification('Erro Firebase: ' + error.message, 'error');
                        });
                } else {
                    saveToLocalStorage();
                    updateMessagesList();
                    updateStats();
                    showNotification('üìù Processando compromisso...');
                }
                
                const hasNew = messages.some(m => !m.status || m.status === 'enviado');
                if (!hasNew) {
                    document.getElementById('notification-badge').style.display = 'none';
                }
            } else {
                console.error('‚ùå Mensagem n√£o encontrada no √≠ndice:', index);
                showNotification('Erro: Mensagem n√£o encontrada', 'error');
            }
        }

        function saveAgendaByIndex(index) {
            console.log('üîç Salvando agenda para √≠ndice:', index);
            const message = messages[index];
            
            if (!message) {
                console.error('‚ùå Mensagem n√£o encontrada no √≠ndice:', index);
                showNotification('Erro: Mensagem n√£o encontrada', 'error');
                return;
            }
            
            console.log('‚úÖ Mensagem encontrada:', message);
            
            // Buscar o container da mensagem usando data-message-index
            const messageContainer = document.querySelector(`[data-message-index="${index}"]`);
            if (!messageContainer) {
                console.error('‚ùå Container da mensagem n√£o encontrado para √≠ndice:', index);
                showNotification('Erro: Container n√£o encontrado', 'error');
                return;
            }
            
            console.log('‚úÖ Container encontrado:', messageContainer);
            
            // Buscar campos dentro deste container espec√≠fico
            const tituloInput = messageContainer.querySelector('.titulo-input');
            const dataInput = messageContainer.querySelector('.data-input');
            const horaInput = messageContainer.querySelector('.hora-input');
            const localInput = messageContainer.querySelector('.local-input');
            const descricaoTextarea = messageContainer.querySelector('.descricao-textarea');
            const prioridadeSelect = messageContainer.querySelector('.prioridade-select');
            
            if (!tituloInput || !dataInput || !horaInput) {
                console.error('‚ùå Campos do formul√°rio n√£o encontrados');
                console.log('Debug campos:', {
                    titulo: !!tituloInput,
                    data: !!dataInput,
                    hora: !!horaInput
                });
                showNotification('Erro: Campos do formul√°rio n√£o encontrados', 'error');
                return;
            }
            
            const titulo = tituloInput.value.trim();
            const data = dataInput.value;
            const hora = horaInput.value;
            
            console.log('üìù Valores obtidos:', {titulo, data, hora});
            
            // Validar campos obrigat√≥rios
            if (!titulo || !data || !hora) {
                showNotification('‚ö†Ô∏è Por favor, preencha t√≠tulo, data e hor√°rio', 'error');
                return;
            }
            
            const agenda = {
                titulo: titulo,
                data: data,
                hora: hora,
                local: localInput ? localInput.value.trim() : '',
                descricao: descricaoTextarea ? descricaoTextarea.value.trim() : '',
                prioridade: prioridadeSelect ? prioridadeSelect.value : 'media'
            };
            
            console.log('üìÖ Agenda criada:', agenda);
            
            // Atualizar mensagem
            message.agenda = agenda;
            message.status = 'agendado';
            message.dataAgendamento = new Date().toISOString();
            message.dataAgendamentoBR = new Date().toLocaleString('pt-BR');
            
            // Salvar no Firebase ou localStorage
            if (isFirebaseConfigured && message.firebaseKey) {
                console.log('üî• Salvando no Firebase...');
                database.ref('messages/' + message.firebaseKey).update({
                    agenda: agenda,
                    status: 'agendado',
                    dataAgendamento: message.dataAgendamento,
                    dataAgendamentoBR: message.dataAgendamentoBR
                })
                .then(() => {
                    console.log('‚úÖ Salvo no Firebase com sucesso');
                    showNotification('üî• Compromisso agendado via Firebase!');
                    updateMessagesList();
                    updateStats();
                })
                .catch((error) => {
                    console.error('‚ùå Erro ao salvar no Firebase:', error);
                    showNotification('Erro Firebase: ' + error.message, 'error');
                });
            } else {
                console.log('üì¶ Salvando no localStorage...');
                saveToLocalStorage();
                updateMessagesList();
                updateStats();
                showNotification('‚úÖ Compromisso agendado com sucesso!');
            }
        }

        function cancelProcessingByIndex(index) {
            console.log('üîç Cancelando processamento √≠ndice:', index);
            const message = messages[index];
            
            if (message) {
                message.status = 'enviado';
                
                if (isFirebaseConfigured && message.firebaseKey) {
                    database.ref('messages/' + message.firebaseKey).update({status: 'enviado'})
                        .then(() => {
                            showNotification('Processamento cancelado via Firebase!', 'info');
                            updateMessagesList();
                            updateStats();
                        })
                        .catch((error) => {
                            console.error('Erro Firebase:', error);
                        });
                } else {
                    saveToLocalStorage();
                    updateMessagesList();
                    updateStats();
                    showNotification('Processamento cancelado', 'info');
                }
            } else {
                console.error('‚ùå Mensagem n√£o encontrada para cancelar √≠ndice:', index);
            }
        }

        function saveToLocalStorage() {
            const allMessages = JSON.parse(localStorage.getItem('agenda_messages') || '[]');
            const otherMessages = allMessages.filter(m => m.sender !== 'chefe');
            const updatedMessages = [...messages, ...otherMessages];
            localStorage.setItem('agenda_messages', JSON.stringify(updatedMessages));
        }

        function updateMessagesList() {
            const list = document.getElementById('messages-list');
            
            if (messages.length === 0) {
                list.innerHTML = '<div class="empty-state"><p>üì≠ Aguardando mensagens do chefe...</p></div>';
                return;
            }

            list.innerHTML = messages.map((message, index) => {
                const status = message.status || 'novo';
                const messageId = message.firebaseKey || message.id || index;
                const displayTime = message.timestampBR || new Date(message.timestamp).toLocaleString('pt-BR');
                
                return `
                <div class="message-item" data-message-index="${index}">
                    <div class="message-header">
                        <span class="message-time">üìÖ Recebido: ${displayTime}</span>
                        <span class="message-status status-${status === 'enviado' ? 'novo' : status}">
                            ${status === 'enviado' ? 'NOVO' : status}
                            ${isFirebaseConfigured ? ' üî•' : ' üì¶'}
                        </span>
                    </div>
                    
                    <div class="message-text">
                        üìù "${message.text}"
                    </div>

                    ${message.status === 'agendado' && message.agenda ? `
                        <div class="agenda-result">
                            <h4>‚úÖ Compromisso Organizado:</h4>
                            <div class="agenda-detail">
                                <strong>üìã T√≠tulo:</strong> ${message.agenda.titulo}
                            </div>
                            <div class="agenda-detail">
                                <strong>üìÖ Data:</strong> ${new Date(message.agenda.data).toLocaleDateString('pt-BR')} √†s ${message.agenda.hora}
                            </div>
                            ${message.agenda.local ? `
                                <div class="agenda-detail">
                                    <strong>üìç Local:</strong> ${message.agenda.local}
                                </div>
                            ` : ''}
                            <div class="agenda-detail">
                                <strong>‚≠ê Prioridade:</strong> ${message.agenda.prioridade.charAt(0).toUpperCase() + message.agenda.prioridade.slice(1)}
                            </div>
                            ${message.agenda.descricao ? `
                                <div class="agenda-detail">
                                    <strong>üìù Obs:</strong> ${message.agenda.descricao}
                                </div>
                            ` : ''}
                            <div class="agenda-detail">
                                <strong>üïí Agendado:</strong> ${message.dataAgendamentoBR || message.dataAgendamento}
                            </div>
                        </div>
                    ` : ''}

                    <div class="agenda-form ${message.status === 'processando' ? 'active' : ''}">
                        <h4 style="margin-bottom: 15px; color: #495057;">üìù Organizar na Agenda</h4>
                        <div class="form-row">
                            <div class="form-group">
                                <label>üìã T√≠tulo do Compromisso</label>
                                <input type="text" class="titulo-input" placeholder="Ex: Reuni√£o com Cliente Jo√£o" required>
                            </div>
                            <div class="form-group">
                                <label>üìÖ Data</label>
                                <input type="date" class="data-input" required>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>üïí Hor√°rio</label>
                                <input type="time" class="hora-input" required>
                            </div>
                            <div class="form-group">
                                <label>‚≠ê Prioridade</label>
                                <select class="prioridade-select">
                                    <option value="baixa">Baixa</option>
                                    <option value="media" selected>M√©dia</option>
                                    <option value="alta">Alta</option>
                                    <option value="urgente">Urgente</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>üìç Local (opcional)</label>
                            <input type="text" class="local-input" placeholder="Ex: Escrit√≥rio, Sala 3">
                        </div>
                        <div class="form-group">
                            <label>üìù Observa√ß√µes (opcional)</label>
                            <textarea class="descricao-textarea" placeholder="Detalhes adicionais, preparativos necess√°rios, etc."></textarea>
                        </div>
                    </div>

                    <div class="action-buttons">
                        ${(!message.status || message.status === 'enviado') ? `
                            <button class="btn btn-process" onclick="processMessageByIndex(${index})">
                                ‚öôÔ∏è Processar Agora
                            </button>
                        ` : ''}
                        
                        ${message.status === 'processando' ? `
                            <button class="btn btn-save" onclick="saveAgendaByIndex(${index})">
                                üíæ Salvar na Agenda
                            </button>
                            <button class="btn btn-cancel" onclick="cancelProcessingByIndex(${index})">
                                ‚ùå Cancelar
                            </button>
                        ` : ''}
                    </div>
                </div>
                `;
            }).join('');
        }

        function updateStats() {
            const novos = messages.filter(m => !m.status || m.status === 'enviado').length;
            const processando = messages.filter(m => m.status === 'processando').length;
            const agendados = messages.filter(m => m.status === 'agendado').length;

            document.getElementById('stat-novos').textContent = novos;
            document.getElementById('stat-processando').textContent = processando;
            document.getElementById('stat-agendados').textContent = agendados;
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }

        function updateConnectionStatus() {
            const header = document.querySelector('.header p');
            if (isFirebaseConfigured) {
                header.innerHTML = 'Organizar compromissos do chefe <span style="color: #90EE90;">üî• Firebase Conectado</span>';
            } else {
                header.innerHTML = 'Organizar compromissos do chefe <span style="color: #FFD700;">üì¶ Modo Demo</span>';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            updateConnectionStatus();
            
            if (isFirebaseConfigured) {
                setupFirebaseListeners();
                showNotification('üî• Conectado ao Firebase! Sincroniza√ß√£o em tempo real ativa.');
            } else {
                loadFromLocalStorage();
                setInterval(loadFromLocalStorage, 3000);
                showNotification('üì¶ Modo demo ativo. Configure Firebase para sincroniza√ß√£o real.', 'info');
            }
            
            const hoje = new Date().toISOString().split('T')[0];
            setInterval(() => {
                document.querySelectorAll('input[type="date"]').forEach(input => {
                    input.min = hoje;
                });
            }, 1000);
        });
    </script>
</body>
</html>
